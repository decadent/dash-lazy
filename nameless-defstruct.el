;;; nameless-defstruct.el -*- lexical-binding: nil -*-
(require 'dash)

(defmacro nameless-defstruct (prefix-symbol name &rest slots)
  "Variant of `cl-defstruct' compatible with `nameless-mode'.
All names generated by `cl-defstruct' have a prefix (symbol-name
PREFIX-SYMBOL) added to them."
  (declare (indent 2))
  (let* ((prefix (symbol-name prefix-symbol))
         (name-and-opts (if (listp name) name (list name)))
         (name (symbol-name (car name-and-opts)))
         (new-name (intern (concat prefix name)))
         (opts (cdr name-and-opts))
         (opt-keys (-map 'car-safe opts)))
    (unless (memq :constructor opt-keys)
      (push `(:constructor ,(intern (concat prefix "make-" name)))
            opts))
    (unless (memq :copier opt-keys)
      (push `(:copier ,(intern (concat prefix "copy-" name)))
            opts))
    `(cl-defstruct (,new-name ,@opts) ,@slots)))

;; Alternative implementation using magic:
;;
;; (require 'with-advice)
;;
;; (eval-and-compile
;;   (defmacro nameless-defstruct (prefix-symbol name &rest slots)
;;     "Variant of `cl-defstruct' compatible with `nameless-mode'.
;; All names generated by `cl-defstruct' have a prefix (symbol-name
;; PREFIX-SYMBOL) added to them."
;;     (declare (indent 2))
;;     (let* ((prefix (symbol-name prefix-symbol))
;;            (name-and-opts (if (listp name) name (list name)))
;;            (name (symbol-name (car name-and-opts)))
;;            (name-and-opts (cons (intern (concat prefix name))
;;                                 (cdr name-and-opts))))
;;       (with-advice ((intern
;;                      :filter-args
;;                      (lambda (args)
;;                        (cons
;;                         (replace-regexp-in-string
;;                          ;; Using rx-to-string because (rx (eval ...))
;;                          ;; can't see local variables!
;;                          (rx-to-string
;;                           '(and bos
;;                                 (group (+ anything) "-")
;;                                 (group (eval prefix))
;;                                 (group (eval name) (? "-" (+ anything)))
;;                                 eos))
;;                          "\\2\\1\\3" (car args) t)
;;                         (cdr args))
;;                        ))
;;                     )
;;         (macroexpand
;;          `(cl-defstruct ,name-and-opts ,@slots))))))

(provide 'nameless-defstruct)
